{"version":3,"file":"static/js/193.c9b12937.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.tsx","components/ContactListItem/ContactListItem.tsx","components/ContactList/ContactList.tsx","components/Filter/Filter.tsx","components/Loader/Loader.tsx","pages/ContactsPage/ContactsPage.tsx"],"sourcesContent":["import * as Yup from 'yup';\nimport { useAddContactMutation, useGetContactsQuery } from '../../redux/Contacts/api';\nimport Notiflix from 'notiflix';\nimport Button from '@mui/material/Button';\nimport { TextField } from 'formik-mui';\nimport { Form, Formik, Field, FormikValues } from 'formik';\nimport { Box } from '@mui/material';\nimport { ContactCreateType } from '../types';\n\nexport function ContactForm() {\n    const { data: contacts } = useGetContactsQuery(null);\n    const [addContact, { isLoading }] = useAddContactMutation();\n\n    const getValues = (values: FormikValues):void => {\n        if(contacts){\n        if (values.name === '' || values.number === '') {\n            return;\n        } else if (contacts.find((contact) => {\n            return contact.name === values.name;\n        })) {\n            return Notiflix.Report.info(\"Внимание\" , `${values.name} is already in contacts`, \"ок\");\n        } else {\n            const contact:ContactCreateType = {\n                name: values.name,\n                number: values.number,\n            };\n            addContact(contact);\n            values.name = '';\n            values.number = '';\n        };}\n    };\n\n    const values: FormikValues = {\n        name: '',\n        number: '',\n    };\n        \n        const phoneSchema = Yup.number()\n            .typeError(\"That doesn't look like a phone number\")\n            .positive(\"A phone number can't start with a minus\")\n            .integer(\"A phone number can't include a decimal point\")\n            .min(5)\n            .required('A phone number is required');\n        \n    const validationSchema = Yup.object({\n        name: Yup.string().required(),\n        number: phoneSchema,\n    });\n\n    return (\n        <Formik initialValues={values} onSubmit={(getValues)} validationSchema={validationSchema}>\n            <Form>\n                <Box\n                    sx={{\n                        display: 'flex',\n                        flexDirection: 'column',\n                        justifyContent: 'flex-end',\n                        width: '100%',\n                        ml: 'auto',\n                        mr: 'auto',\n                        // p: '30px',\n                    }}>\n                    <Field component={TextField} name=\"name\" label=\"name\" id=\"standard-basic\" variant=\"standard\" disabled={false} margin=\"normal\" />\n                    <Field component={TextField} name=\"number\" label=\"number\" id=\"standard-basic\" variant=\"standard\" disabled={false} margin=\"normal\" />\n                    <Box sx={{ ml: 'auto' }}>\n                        <Button variant=\"contained\" color=\"primary\" type=\"submit\" disabled={isLoading}>{isLoading ? 'please wait...' : 'add contact'}</Button>\n                    </Box>\n                </Box>\n            </Form>\n        </Formik>\n    );\n};\n","import * as Yup from 'yup';\nimport { Form, Formik, Field, FormikValues } from 'formik';\nimport PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { useDeleteContactMutation, useEditContactMutation } from '../../redux/Contacts/api';\nimport Notiflix from 'notiflix';\nimport { TextField } from 'formik-mui';\nimport { Box, Button, ListItem, Typography } from '@mui/material';\nimport { ContactCreateType, ContactRequestType } from '../types';\n\nexport function ContactListItem({array,index,contactProps }:{array:ContactRequestType[],index:number,contactProps:ContactRequestType}) {\n    const [removeContact, { isLoading }] = useDeleteContactMutation();\n    const [editContact, { isLoading: load }] = useEditContactMutation();\n    const [showForm, setShowForm] = useState<boolean>(false);\n    const values: FormikValues = { name:contactProps.name, number:contactProps.number };\n        \n        const phoneSchema = Yup.number()\n            .typeError(\"That doesn't look like a phone number\")\n            .positive(\"A phone number can't start with a minus\")\n            .integer(\"A phone number can't include a decimal point\")\n            .min(5)\n            .required('A phone number is required');\n        \n        const validationSchema = Yup.object({\n            name: Yup.string().max(20).required(),\n            number: phoneSchema,\n        });\n    \n    function changeContact(inputValues: FormikValues){\n        const contact: ContactCreateType = {\n            name: inputValues.name,\n            number: inputValues.number,\n        };\n      \n        if (array.find(({name}, pos) => name === contact.name && pos !== index)) {\n           Notiflix.Report.info(\"warning!\",'a contact with that name already exists',\"ok\");\n            return\n        }\n        if (array.find(({ name, number }) => name === contact.name && number === contact.number)) {\n            Notiflix.Report.info(\"warning!\",'cotact data has not changed',\"ok\");\n            return\n        }\n        editContact({ id:contactProps.id, contact });\n        setShowForm(false)\n    };\n  \n    return (\n        <ListItem sx={{ display: 'flex', justifyContent: 'space-between', borderBottom:'1px solid black' }}>\n            {!showForm ?\n                (load || isLoading ? <Typography><b>please wait............</b></Typography> :\n                    < >\n                        <Box>\n                            <Typography ><b>{contactProps.name} : </b> {contactProps.number}</Typography>\n                        </Box>\n                        <Box sx={{ ml: 'auto' }}>\n                            <Button variant=\"contained\" onClick={() => { setShowForm(true) }} type='button' sx={{ ml: '10px' }}>Edit</Button>\n                            <Button variant=\"contained\" onClick={() => { removeContact(contactProps.id) }} type='button' sx={{ ml: '10px' }}>Delete</Button>\n                        </Box>\n                    </>) : (\n                    <Formik initialValues={values} onSubmit={changeContact} validationSchema={validationSchema} >\n                        <Form style={{ width: '100%' }}>\n                            <Box sx={{ display: 'flex', justifyContent: 'space-between', }}>\n                                <Box>\n                                    <Field component={TextField} name=\"name\" variant=\"standard\" disabled={false} />\n                                    <Field component={TextField} name=\"number\" variant=\"standard\" disabled={false} />\n                                </Box>\n                                <Box>\n                                    <Button variant=\"contained\" color='secondary' type=\"submit\" sx={{ ml: '10px' }}>Confirm</Button>\n                                    <Button variant=\"contained\" color='secondary' type=\"button\" onClick={() => { setShowForm(false) }} sx={{ ml: '10px' }} >Cancel</Button>\n                                </Box> </Box>\n                        </Form>\n                    </Formik>\n                )}\n        </ListItem>\n    );\n};\n\nContactListItem.propTypes = {\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    array: PropTypes.array.isRequired,\n    index:PropTypes.number.isRequired,\n};\n\n","import { Box, List, Typography } from '@mui/material';\nimport { ContactListItem } from '../../components/ContactListItem/ContactListItem';\nimport { useSelector } from 'react-redux';\nimport { useGetContactsQuery } from '../../redux/Contacts/api';\nimport { RootState } from '../../redux/store';\nimport { ContactRequestType } from '../types';\n\n\nexport function ContactList () {\n    const { data } = useGetContactsQuery(null);\n    const filter = useSelector((state: RootState) => state.filter);\n    if (!data) return null;\n    const normalizedFilter = filter.trim().toLowerCase();\n    const filteredContacts = data.filter(({ name }) => {\n        return name.toLowerCase().includes(normalizedFilter);\n    });\n\n    return (\n        data.length > 0 ?\n        <Box sx={{ width: 'auto', pt: '40px' }}>\n            <Typography variant=\"h3\">Contacts [{data.length}]</Typography>\n            <List>\n                {filteredContacts.map(({id,name,number}:ContactRequestType, index) => {\n                    return <ContactListItem\n                        key={id}\n                        index={index}\n                        array={filteredContacts}\n                        contactProps={{ id, name, number }} number={''} id={''} name={''}                    />\n                }\n                )}\n            </List>\n            </Box> :\n          <Typography variant=\"h3\">There is no contacts yet</Typography>  \n    );\n};\n","import { useDispatch } from 'react-redux';\nimport { getFlter } from '../../redux/Filter/slice';\nimport { Box, TextField } from '@mui/material';\n\n\nexport function Filter() {\n    const dispatch = useDispatch()\n    return (\n        <Box\n            sx={{\n                display: 'flex',\n                flexDirection: 'column',\n                justifyContent: 'flex-end',\n                width: '100%',\n                ml: 'auto',\n                mr: 'auto',\n            }}>\n            <TextField\n                name=\"filter\"\n                type=\"text\"\n                label=\"Find contacts by name\"\n                id=\"standard-basic\"\n                variant=\"standard\"\n                disabled={false}\n                onChange={(e) => dispatch(getFlter(e.target.value))}\n            />\n        </Box>\n    );\n};\n","import { Container } from '@mui/material';\nimport { CirclesWithBar } from 'react-loader-spinner';\n\nexport function Loader() {\n    return (\n        <Container sx={{p:'40px',opacity:'.6'}}\n        ><CirclesWithBar\n                height=\"50%\"\n                width=\"50%\"\n                color=\"#11790f\"\n                wrapperStyle={{}}\n                wrapperClass=\"\"\n                visible={true}\n                outerCircleColor=\"\"\n                innerCircleColor=\"\"\n                barColor=\"\"\n                ariaLabel='circles-with-bar-loading'\n            />\n        </Container>\n    );\n};","import { Box, Typography } from \"@mui/material\";\nimport { ContactForm } from \"../../components/ContactForm/ContactForm\";\nimport { ContactList } from \"../../components/ContactList/ContactList\";\nimport { Filter } from \"../../components/Filter/Filter\";\nimport { Loader } from \"../../components/Loader/Loader\";\nimport { useEffect } from \"react\";\nimport { useGetContactsQuery } from \"../../redux/Contacts/api\";\n\nfunction ContactsPage() {\n  const { isLoading, refetch } = useGetContactsQuery(null);\n  useEffect(() => { refetch(); }, [refetch]);\n\n  return (\n    isLoading ? <Loader /> :\n      <Box sx={{ display: 'flex', justifyContent: 'space-evenly', flexWrap: 'wrap', alignItems: 'flex-start', p: '40px', }}>\n        <Box sx={{ width: 'auto' }}>\n          <Typography variant=\"h2\">Phonebook</Typography>\n          <ContactForm />\n          <Filter />\n        </Box>\n        <ContactList />\n      </Box>\n  );\n};\n\nexport default ContactsPage;"],"names":["ContactForm","contacts","useGetContactsQuery","data","useAddContactMutation","addContact","isLoading","phoneSchema","Yup","typeError","positive","integer","min","required","validationSchema","name","number","initialValues","onSubmit","values","find","contact","Notiflix","Box","sx","display","flexDirection","justifyContent","width","ml","mr","component","TextField","label","id","variant","disabled","margin","Button","color","type","ContactListItem","array","index","contactProps","useDeleteContactMutation","removeContact","useEditContactMutation","editContact","load","useState","showForm","setShowForm","max","ListItem","borderBottom","inputValues","pos","style","onClick","Typography","ContactList","filter","useSelector","state","normalizedFilter","trim","toLowerCase","filteredContacts","includes","length","pt","List","map","Filter","dispatch","useDispatch","onChange","e","getFlter","target","value","Loader","Container","p","opacity","height","wrapperStyle","wrapperClass","visible","outerCircleColor","innerCircleColor","barColor","ariaLabel","refetch","useEffect","flexWrap","alignItems"],"sourceRoot":""}