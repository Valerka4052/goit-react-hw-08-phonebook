{"version":3,"file":"static/js/327.8008b268.chunk.js","mappings":"0RAUO,SAASA,IACZ,IAAMC,GAAWC,EAAAA,EAAAA,MAmBXC,EAAmBC,EAAAA,GAAW,CAChCC,MAAOD,EAAAA,KAAaC,QACpBC,SAAUF,EAAAA,OAGd,OACI,SAACG,EAAA,EAAD,CAAKC,GAAI,CAAEC,EAAG,OAAQC,OAAQ,QAA9B,UACI,SAAC,KAAD,CACIC,cAbiB,CACzBN,MAAO,GACPC,SAAU,IAYFM,SAAU,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,WA1BN,SAACD,GACxB,GAAqB,KAAjBA,EAAOR,OAAoC,KAApBQ,EAAOP,SAC9B,OAAOS,IAAAA,OAAAA,QAAwB,mDAAW,oIAA2B,WAGzE,IAAMC,EAA0B,CAC5BX,MAAOQ,EAAOR,MACdC,SAAUO,EAAOP,UAErBL,GAASgB,EAAAA,EAAAA,IAAMD,GAClB,CAgBkDE,CAAmBL,GAASC,GAAa,EAChFX,iBAAkBA,EAHtB,UAKI,SAAC,KAAD,WAEI,UAACI,EAAA,EAAD,CAAKC,GAAI,CACLW,QAAS,OACTC,cAAe,SACfC,eAAgB,WAChBC,MAAO,OACPC,GAAI,OACJC,GAAI,OACJf,EAAG,QAPP,WASI,SAAC,KAAD,CAAOgB,UAAWC,EAAAA,EAAWC,QAAQ,WAAWC,KAAK,QAAQC,MAAM,QAAQC,KAAK,QAAQC,UAAU,EAAOC,OAAO,YAChH,SAAC,KAAD,CAAOP,UAAWC,EAAAA,EAAWC,QAAQ,WAAWC,KAAK,WAAWC,MAAM,WAAWC,KAAK,WAAWC,UAAU,EAAOC,OAAO,YACzH,SAACzB,EAAA,EAAD,CAAKC,GAAI,CAAEe,GAAI,QAAf,UACI,SAACU,EAAA,EAAD,CAAQN,QAAQ,WAAWO,MAAM,UAAUJ,KAAK,SAAhD,8BAO3B,CCrDD,MARA,WACI,OACI,0BACI,SAAC9B,EAAD,KAGX,C","sources":["components/LoginForm/LoginForm.tsx","pages/LoginPage/LoginPage.tsx"],"sourcesContent":["import * as Yup from 'yup';\nimport { Form, Formik, Field, FormikValues } from 'formik';\nimport { LogIn } from '../../redux/Authorisation/operations';\nimport Notiflix from 'notiflix';\nimport { Box, Button } from '@mui/material';\nimport { TextField } from 'formik-mui';\nimport { useAppDispatch } from '../../redux/store';\nimport { LoginUserType } from '../types';\n\n\nexport function LoginForm() {\n    const dispatch = useAppDispatch();\n\n    const getLoginIformation = (values:FormikValues):void => {\n        if (values.email === '' || values.password === '') {\n            return Notiflix.Report.warning(\"Внимание\",'Заполните все поля ввода',\"oк\")\n        };\n     \n        const loginUser:LoginUserType = {\n            email: values.email,\n            password: values.password\n        };\n        dispatch(LogIn(loginUser))\n    };\n\n    const values: FormikValues = {\n        email: '',\n        password: '',\n    };\n        \n    const validationSchema = Yup.object({\n        email: Yup.string().email(),\n        password: Yup.string(),\n    });\n    \n    return (\n        <Box sx={{ p: '40px', height: '100%', }}>\n            <Formik\n                initialValues={values}\n                onSubmit={(values, { resetForm }) => { getLoginIformation(values); resetForm() }}\n                validationSchema={validationSchema}\n            >\n                <Form >\n                    \n                    <Box sx={{\n                        display: 'flex',\n                        flexDirection: 'column',\n                        justifyContent: 'flex-end',\n                        width: '30vw',\n                        ml: 'auto',\n                        mr: 'auto',\n                        p: '30px',\n                    }}>\n                        <Field component={TextField} variant='standard' name=\"email\" label='Email' type=\"email\" disabled={false} margin=\"normal\" />\n                        <Field component={TextField} variant='standard' name=\"password\" label='Password' type=\"password\" disabled={false} margin=\"normal\" />\n                        <Box sx={{ ml: 'auto', }}>\n                            <Button variant=\"outlined\" color=\"primary\" type=\"submit\" >Log In</Button>\n                        </Box>\n                    </Box>\n                </Form>\n            </Formik>\n        </Box>\n    );\n};\n","import { LoginForm } from \"../../components/LoginForm/LoginForm\";\n\nfunction LoginPage() {\n    return (\n        <div>\n            <LoginForm />\n        </div>\n    );\n};\n\nexport default LoginPage"],"names":["LoginForm","dispatch","useAppDispatch","validationSchema","Yup","email","password","Box","sx","p","height","initialValues","onSubmit","values","resetForm","Notiflix","loginUser","LogIn","getLoginIformation","display","flexDirection","justifyContent","width","ml","mr","component","TextField","variant","name","label","type","disabled","margin","Button","color"],"sourceRoot":""}