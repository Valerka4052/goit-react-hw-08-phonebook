{"version":3,"file":"static/js/84.d038ae3d.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/ContactListItem/ContactListItem.styled.js","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/Loader/Loader.styled.js","components/Loader/Loader.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import styled from \"@emotion/styled\";\nimport { Form as FormikForm, Formik as FormikFormik, Field as FormikField, ErrorMessage as FormikErrorMessage } from 'formik';\n\nexport const Form = styled(FormikForm)`\ndisplay:flex;\nflex-direction: column;\npadding:40px;\nwidth: 800px;\nheight:auto;\nborder-radius: 40px;\nbackground-color:lightgreen;\n`;\n\nexport const Formik = styled(FormikFormik)`\nmargin-bottom:40px;\n`;\n\nexport const Field = styled(FormikField)`\nwidth:80%;\npadding:15px 25px;\nfont-size:30px;\nfont-weight:500;\nmargin-top:20px;\nborder-radius: 15px;\n`;\n\nexport const ErrorMessage = styled(FormikErrorMessage)`\ncolor:red;\nfont-size:15px;\nfont-weight:500;\n`;\n\nexport const Label = styled.label`\ndisplay:flex;\nflex-direction: column;\nalign-items:center;\nmargin-bottom:20px;\n`;\n\nexport const Button = styled.button`\ndisplay:inline-flex;\njustify-content: center;\nalign-items:center;\nmargin-left:auto;\nmargin-right:auto;\nmargin-top:30px;\nwidth:50%;\nfont-size:30px;\nfont-weight:500;\npadding:15px 25px;\nborder-radius: 15px;\nbackground-color:sandybrown;\ncursor:pointer;\n&:hover{\n    background-color:saddlebrown;\n    color:whitesmoke;\n}\n`;","import * as Yup from 'yup';\nimport { Form, Formik, Field, ErrorMessage, Label, Button } from './ContactForm.styled';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addContact } from \"redux/Contacts/api\";\n\n\nexport function ContactForm() {\n    const dispatch = useDispatch();\n    const contacts = useSelector(state => state.contacts.items);\n\n    const getValues = (inputValues) => {\n        if (inputValues.name === '' || inputValues.number === '') {\n            return;\n        } else if (contacts.find((contact) => {\n            return contact.name === inputValues.name;\n        })) {\n            return alert(`${inputValues.name} is already in contacts`);\n        } else {\n            const contact = {\n                name: inputValues.name,\n                number: inputValues.number,\n            };\n            dispatch(addContact(contact));\n            inputValues.name = '';\n            inputValues.number = '';\n            };\n    };\n\n        const values = {\n            name: '',\n            number: '',\n        };\n        \n        const phoneSchema = Yup.number()\n            .typeError(\"That doesn't look like a phone number\")\n            .positive(\"A phone number can't start with a minus\")\n            .integer(\"A phone number can't include a decimal point\")\n            .min(5)\n            .required('A phone number is required');\n        \n        const validationSchema = Yup.object({\n            name: Yup.string().required(),\n            number: phoneSchema,\n        });\n\n        const submitForm = (values) => {\n           getValues(values);\n        };\n        \n    \n        return (\n            <Formik\n                initialValues={values}\n                onSubmit={submitForm}\n                validationSchema={validationSchema}\n            >\n                <Form>\n                    <Label>Name<Field name=\"name\" /><ErrorMessage name=\"name\" component=\"p\" /></Label>\n                    <Label>Number<Field name=\"number\" /><ErrorMessage name=\"number\" type=\"number\" component=\"p\" /></Label>\n                    <Button type=\"submit\">add contact</Button>\n                </Form>\n            </Formik>\n        );\n    };\n","import styled from \"@emotion/styled\";\n\nexport const Item = styled.li`\nfont-size:30px;\nfont-weight:500;\ndisplay:flex;\nalign-items: baseline;\njustify-content:space-between;\nmargin-top:20px;\n`;\n\nexport const Button = styled.button`\ndisplay:inline-block;\nalign-items:center;\nfont-size:30px;\nfont-weight:500;\npadding:15px 25px;\nborder-radius: 15px;\nbackground-color:sandybrown;\ncursor:pointer;\n&:hover{\n    background-color:saddlebrown;\n    color:whitesmoke;\n}\n`; ","import PropTypes from 'prop-types';\nimport { Item, Button } from './ContactListItem.styled';\nimport { useDispatch } from 'react-redux'; \nimport { removeContact } from 'redux/Contacts/api';\n\nexport function ContactListItem({ name, number, id }) {\nconst dispatch = useDispatch()\n    return (\n        <Item >{name}: {number}\n            <Button\n                onClick={() => {\n                    dispatch(removeContact(id))\n                }}\n                type='button'\n            >\n                Delete\n            </Button>\n        </Item>\n    );\n};\n\nContactListItem.propTypes = {\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n};\n\n","import styled from \"@emotion/styled\";\n\nexport const List = styled.ul`\ndisplay:flex;\nflex-direction: column;\npadding:40px;\nwidth: 800px;\nmax-height:100vh;\nborder-radius: 40px;\nlist-style:none;\n`;","import { ContactListItem } from 'components/ContactListItem/ContactListItem';\nimport { List } from './ContactList.styled';\nimport { useSelector } from 'react-redux';\n\n\nexport function ContactList () {\n    const contacts = useSelector(state => state.contacts.items);\n   \n    const filter = useSelector(state => state.filter);\n     if(!contacts)return\n    const normalizedFilter = filter.toLowerCase();\n    const filteredContacts = contacts.filter(({ name }) => {\n        return name.toLowerCase().includes(normalizedFilter);\n    });\n\n    return (\n        contacts.length > 0 && <List>\n            {filteredContacts.map(({ name, number, id }) => {\n                return <ContactListItem\n                    key={id}\n                    name={name}\n                    number={number}\n                    id={id}\n                />\n            }\n            )}\n        </List>\n    );\n};\n","import styled from \"@emotion/styled\";\n\nexport const Container = styled.div`\ndisplay:flex;\nflex-direction: column;\npadding:40px;\nwidth: 800px;\nheight:auto;\nborder-radius: 40px;\nbackground-color:lightgreen;\n`;\n\nexport const Label = styled.label`\ndisplay:flex;\nflex-direction: column;\nalign-items:center;\nmargin-bottom:20px;\n`;\n\nexport const Input = styled.input`\nwidth:80%;\npadding:15px 25px;\nfont-size:30px;\nfont-weight:500;\nmargin-top:20px;\nborder-radius: 15px;\n`;","import { useDispatch } from 'react-redux';\nimport { Container, Label, Input } from './Filter.styled';\nimport { getFlter } from 'redux/Filter/slice';\n\nexport function Filter() {\n    const dispatch = useDispatch()\n    return (\n        <Container>\n            <Label >Find contacts by name<Input\n                onChange={(e) => dispatch(getFlter(e.target.value))}\n                name=\"filter\"\n                type=\"text\" />\n            </Label>\n        </Container>\n    );\n};\n","import styled from \"@emotion/styled\";\n\nexport const Container = styled.div`\nposition:absolute;\n/* pointer-events: none; */\n width: 20%;\n  height: 20%;\n  /* overflow: auto; */\n  margin: auto;\n  position: absolute;\n  top: -50%; left: 0; bottom: 0; right: 0;\n  opacity:.6;\n`;","import { CirclesWithBar } from 'react-loader-spinner';\nimport { Container } from './Loader.styled';\n\nexport function Loader() {\n    return (\n        <Container\n        ><CirclesWithBar\n                height=\"100%\"\n                width=\"100%\"\n                color=\"#4fa94d\"\n                wrapperStyle={{}}\n                wrapperClass=\"\"\n                visible={true}\n                outerCircleColor=\"\"\n                innerCircleColor=\"\"\n                barColor=\"\"\n                ariaLabel='circles-with-bar-loading'\n            />\n        </Container>\n    );\n};","import { ContactForm } from \"components/ContactForm/ContactForm\";\nimport { ContactList } from \"components/ContactList/ContactList\";\nimport { Filter } from \"components/Filter/Filter\";\nimport { Loader } from \"components/Loader/Loader\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchContacts } from \"redux/Contacts/api\";\nimport { useEffect } from \"react\";\n\n\n function ContactsPage() {\n   const { error, isLoading } = useSelector(state => state.contacts);\n   const dispatch = useDispatch();\n   useEffect(() => {\n     dispatch(fetchContacts());\n   }, [dispatch]);\n\n    return (\n            <div\n      style={{\n        position: 'relative',\n      }}\n    >\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'center',\n          textAlign: 'center',\n        }}\n      >\n        \n        {error ? <h1>{error.message}</h1> :\n          <div>\n            <h1>Phonebook</h1>\n            <ContactForm />\n            <h2>Contacts</h2>\n            <Filter />\n        </div>\n          } \n        <ContactList />\n        {isLoading && <Loader />}\n      </div>\n    </div>\n    )\n}\nexport default ContactsPage"],"names":["Form","styled","FormikForm","Formik","FormikFormik","Field","FormikField","ErrorMessage","FormikErrorMessage","Label","Button","ContactForm","dispatch","useDispatch","contacts","useSelector","state","items","phoneSchema","Yup","typeError","positive","integer","min","required","validationSchema","name","number","initialValues","onSubmit","values","inputValues","find","contact","alert","addContact","getValues","component","type","Item","ContactListItem","id","onClick","removeContact","List","ContactList","filter","normalizedFilter","toLowerCase","filteredContacts","includes","length","map","Container","Input","Filter","onChange","e","getFlter","target","value","Loader","height","width","color","wrapperStyle","wrapperClass","visible","outerCircleColor","innerCircleColor","barColor","ariaLabel","error","isLoading","useEffect","fetchContacts","style","position","display","justifyContent","textAlign","message"],"sourceRoot":""}